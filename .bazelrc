# See https://docs.bazel.build/versions/master/user-manual.html#bazelrc.

# Use this configuration when targeting Windows. Eventually this will
# no longer be required:
# https://bazel.build/roadmaps/platforms.html#replace---cpu-and---host_cpu-flags.
build:windows --crosstool_top=@io_tweag_rules_haskell_ghc_windows_amd64//:cc_toolchain -s --verbose_failures --sandbox_debug

build:ci --loading_phase_threads=1
build:ci --jobs=2
build:ci --verbose_failures
# Make sure we don't rely on the names of convenience symlinks because those
# can be changed by user.
build:ci --symlink_prefix=bazel-ci-
common:ci --color=no
test:ci --test_output=errors

# Note [backward compatible options]

# XXX: --incompatible_use_python_toolchains needs a specific setup for
# each environment if python is provided by the system
# That's complicated to setup. Bazel is supposed to provide automatic
# detection utilities, see
# https://github.com/bazelbuild/bazel/issues/7899
# But it does not work on windows
# see: https://github.com/bazelbuild/bazel/issues/7844
# This is only used in rules_haskell tests, so user won't face this
# issue.
build  --incompatible_use_python_toolchains=false

# test environment does not propagate locales by default
# some tests reads files written in UTF8, we need to propagate the correct
# environment variables, such as LOCALE_ARCHIVE
# We also need to setup an utf8 locale
test --test_env=LANG=en_US.utf8 --test_env=LOCALE_ARCHIVE

try-import .bazelrc.local
